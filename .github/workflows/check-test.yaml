---
name: Lint, Build, and Test Docker Image

on:  # yamllint disable-line rule:truthy
  pull_request:
    branches:
      - main  # Trigger on pull requests targeting the "main" branch
  workflow_call:  # Allow this workflow to be called by other workflows
    inputs: {}

env:
  UV_VERSION: "0.6.4"  # Global variable for UV version

jobs:
  # Run code quality checks
  check:
    name: Lint and Static Analysis
    runs-on: ubuntu-latest

    steps:
      # Check out the code repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Install uv
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          # Install a specific version of uv.
          version: ${{ env.UV_VERSION }}

      # Install Python
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      # Install dependencies
      - name: Install the project
        run: uv sync --dev

      # Install trivy
      - name: Manual Trivy Setup
        uses: aquasecurity/setup-trivy@v0.2.0

      # Run checks
      - name: Run the suite of checks
        run: make check

      # Verify that uv.lock is up to date
      - name: Verify uv.lock file
        run: |
          # Check for changes in the lock file
          if [[ $(git status --porcelain uv.lock) ]]; then
            echo "::error::uv.lock file is not up to date. Run 'uv sync' and commit the changes."
            exit 1
          else
            echo "uv.lock file is up to date."
          fi

  # Make sure the version in pyproject.toml has been incremented
  check-version:
    name: Check Project Version
    runs-on: ubuntu-latest

    steps:
      # Check out the pull request code
      - name: Checkout the PR branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      # Get the version from pyproject.toml on the pull request branch
      - name: Get version from PR branch
        id: pr_version
        run: |
          PR_VERSION=$(python3 -c "import tomllib; \
            print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "pr_version=$PR_VERSION" >> $GITHUB_ENV

      # Fetch the main branch
      - name: Fetch main branch
        run: |
          git fetch origin main:main

      # Get the version from pyproject.toml on the main branch
      - name: Get version from main branch
        id: main_version
        run: |
          MAIN_VERSION=$(git show main:pyproject.toml | python3 -c "import tomllib, sys; \
            print(tomllib.load(sys.stdin.buffer)['project']['version'])")
          echo "main_version=$MAIN_VERSION" >> $GITHUB_ENV

      # Compare versions
      - name: Compare versions
        run: |
          source scripts/logger.sh
          if [ "${{ env.pr_version }}" == "${{ env.main_version }}" ]; then
            error "::error::Version in pyproject.toml (${{ env.pr_version }}) matches version in main \
          (${{ env.main_version }})."
            error "::error::Increment the version, run 'uv sync', and commit the changes."
            exit 1
          else
           success "Version in pyproject.toml has been updated (PR: ${{ env.pr_version }}, \
          Main: ${{ env.main_version }})."
          fi

  # Make sure the container builds and passes basic tests
  docker-build-test:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    needs: check

    steps:
      # Check out the code repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Capture the PR number as an environment variable
      - name: Set PR Number
        run: echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_ENV

      # Set up Docker Buildx (for multi-platform builds)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Build the Docker image (without pushing it)
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: false
          tags: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:pr-${{ env.pr_number }}

      # Test the Docker image
      # Assumes you have some method to run tests within the container
      # Example below is generic and can be adapted for your needs
      - name: Run Tests in Docker Container
        run: |
          echo "make test - TBD"
        # make test TAG=pr-${PR_NUMBER}
